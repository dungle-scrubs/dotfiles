" ==== Options ====
let mapleader=" "

" set trackactionids = true

set which-key
set ideajoin
set peekaboo
set quickscope
set NERDTree
set functiontextobj

" Keymaps handled in IDE:
" Cmd + k - expand selection
" Cmd + j - shrink selection

" Prevent the cursor from jumping ahead when escaping which-key menu
" nnoremap <SPACE> <Nop>
" set notimeout
set timeoutlen=10000

let g:WhichKey_DefaultDelay = 500

" Prevent which-key menu from opening when using gg
nnoremap gg gg

" Add "-" to what is considered a word, for word selection
set iskeyword+=-

" Use system clipboard for all operations
set clipboard+=unnamed
set clipboard+=unnamedplus
set clipboard+=ideaput

" Move visual block selection up/down
xnoremap J :action MoveLineDown<CR>
xnoremap K :action MoveLineUp<CR>

" Enable IdeaVim in tool windows
set ideavimsupport+=dialog

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

" Redo
noremap U <C-r>

" Map black hole register, use "dw, "diw, etc to occasionally use the register
nnoremap x "_x
nnoremap dw "_dw
nnoremap diw "_diw
nnoremap daw "_daw

" Paste over without overwriting default register
xnoremap p P

" Jump between angle brackets
set matchpairs+=<:>


" Highlight search results
set hlsearch

" Remove highlights
nnoremap <esc> :nohlsearch<cr><esc>

" Move to the beginning of the next word
map w [w

" Move to the end of the next word
map e ]w

" Move to the end of the previous word
map b [b

" Move to the beginning of the previous word
map ge ]b

" Case-insensitive search
set ignorecase

" Enable case-sensitive search when at lease one capital letter is present
set smartcase

" Search while typing
set incsearch

" Generate
nmap <C-space> <Action>(Generate)

" Code completion
imap <C-Space> <Action>(CodeCompletion)
nmap <C-Space> <Action>(InsertLiveTemplate)
imap <S-Space> <Action>(EditorCompleteStatement)

" Order like a A b B c C etc...
let g:WhichKey_SortOrder = "by_key_prefix_last"

" Order lower-case first
let g:WhichKey_SortCaseSensitive = "false"

" Close which-key popup and don't process formerly typed keys
let g:WhichKey_ProcessUnknownMappings = "false"

" Open this config
let g:WhichKeyDesc_c_config = "<leader>c Config"
let g:WhichKeyDesc_cc_config = "<leader>cc Edit .ideavimrc"
noremap <leader>cc :edit ~/.ideavimrc<cr>
let g:WhichKeyDesc_cs_config = "<leader>cs Source .ideavimrc"
noremap <leader>cs :source ~/.ideavimrc<cr>:nohlsearch<cr>
let g:WhichKeyDesc_ca_copy_absolute_path = "<leader>ca Copy absolute path"
noremap <leader>ca <Action>(CopyAbsolutePath)
let g:WhichKeyDesc_cn_copy_file_name = "<leader>cn Copy file name"
noremap <leader>cn <Action>(CopyFileName)
let g:WhichKeyDesc_cp_copy_content_root_path = "<leader>cp Copy content rooth path"
noremap <leader>cp <Action>(CopyContentRootPath)

" Splitter / tab navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l


" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
" Feel free to pick your own mappings that are not affected. I like to use <leader>
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

let g:WhichKeyDesc_w_window_actions = "<leader>w Window actions"
nnoremap <leader>w <C-w>w

let g:WhichKeyDesc_ws_window_new_split = "<leader>ws Split down"
nmap <leader>ws <Action>(SplitHorizontally)
let g:WhichKeyDesc_wv_window_new_vsplit = "<leader>wv Split right"
nmap <leader>wv <Action>(SplitVertically)
let g:WhichKeyDesc_wu_unsplit = "<leader>wu Unsplit"
nmap <leader>wu<Action>(Unsplit)
let g:WhichKeyDesc_wa_unsplit_all = "<leader>wa Unsplit all"
nmap <leader>wa <Action>(UnsplitAll)
let g:WhichKeyDesc_wm_maximize_editor = "<leader>wm Maximize tab toggle"
nmap <leader>wm <Action>(MaximizeEditorInSplit)
let g:WhichKeyDesc_wo_close_all_other_tabs = "<leader>wo Close all other tabs"
nmap <leader>wo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_wg_move_to_opposite_group = "<leader>wg Move to opposite group"
nmap <leader>wg <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_ctrlwh_split_and_move_left = "<leader>wh Split and move left"
nmap <leader>wh <Action>(MoveTabLeft)
let g:WhichKeyDesc_ctrlwk_split_and_move_up = "<leader>wk Split and move up"
nmap <leader>wk <Action>(MoveTabUp)
let g:WhichKeyDesc_ctrlwj_split_and_move_down = "<leader>wj Split and move down"
nmap <leader>wj <Action>(MoveTabDown)
let g:WhichKeyDesc_ctrlwl_split_and_move_right = "<leader>wl Split and move right"
nmap <leader>wl <Action>(MoveTabRight)

" LSP
let g:WhichKeyDesc_l_goto_declaration = "<leader>l LSP"
let g:WhichKeyDesc_ld_goto_declaration = "<leader>ld Goto declaration"
nmap <leader>ld <Action>(GotoDeclaration)
let g:WhichKeyDesc_ls_view_source = "<leader>ls View source"
nmap <leader>ls <Action>(ViewSource)
let g:WhichKeyDesc_ly_goto_type_declaration = "<leader>ly Goto type declaration"
nmap <leader>ly <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_lY_quick_type_definition = "<leader>lY Quick type definition (popup)"
nmap <leader>lY <Action>(QuickTypeDefinition)
let g:WhichKeyDesc_li_goto_implementation = "<leader>li Goto implementation"
nmap <leader>li <Action>(GotoImplementation)
let g:WhichKeyDesc_lI_quick_implementations = "<leader>lI Quick implementations (popup)"
nmap <leader>lI <Action>(QuickImplementations)
let g:WhichKeyDesc_lt_goto_test = "<leader>lt Goto test"
nmap <leader>lt <Action>(GotoTest)
let g:WhichKeyDesc_lm_goto_super_method = "<leader>lt Goto super method"
nmap <leader>lm <Action>(GotoSuperMethod)
let g:WhichKeyDesc_lu_show_usages = "<leader>lu Show usages (in popup)"
nmap <leader>lu <Action>(ShowUsages)
let g:WhichKeyDesc_lU_find_usages = "<leader>lU Find usages (in panel)"
nmap <leader>lU <Action>(FindUsages)
let g:WhichKeyDesc_lx_expression_type_info = "<leader>lx Expression type info (popup)"
nmap <leader>lx <Action>(ExpressionTypeInfo)
let g:WhichKeyDesc_lf_file_structure_popup = "<leader>lf File structure (popup)"
nmap <leader>lf <Action>(FileStructurePopup)

" File explorer
let g:WhichKeyDesc_e_file_explorer = "<leader>e File tree"
nmap <leader>e :call NERDTreeFocusOrOpen()<CR>
" If NERDTree is closed, open it
" If NERDTree is open, focus it
nmap <leader>e :NERDTreeFocus<CR>

" Find
let g:WhichKeyDesc_f_find = "<leader>f Find"
let g:WhichKeyDesc_ff_find = "<leader>ff Find"
map <leader>ff <Action>(Find)
let g:WhichKeyDesc_fF_find_in_path = "<leader>fF Find in path "
map <leader>fF <Action>(FindInPath)
let g:WhichKeyDesc_fr_replace = "<leader>fr Replace"
map <leader>fr <Action>(Replace)
let g:WhichKeyDesc_fR_replace_in_path = "<leader>fR Replace in path"
map <leader>fR <Action>(ReplaceInPath)

" Search
let g:WhichKeyDesc_s_search = "<leader>s Search / surround"
let g:WhichKeyDesc_sf_goto_file = "<leader>sf Files"
map <leader>sf <Action>(GotoFile)
let g:WhichKeyDesc_se_search_everywhere = "<leader>se Everywhere"
map <leader>se <Action>(SearchEverywhere)
let g:WhichKeyDesc_st_text_search_action = "<leader>st Text"
map <leader>st <Action>(TextSearchAction)
let g:WhichKeyDesc_sa_goto_action = "<leader>sp Action"
map <leader>sp <Action>(GotoAction)
let g:WhichKeyDesc_sc_goto_class = "<leader>sc Class"
map <leader>sc <Action>(GotoClass)

" Plugins
let g:WhichKeyDesc_plugins = "<leader>x Plugins"
map <leader>x <Action>(WelcomeScreen.Plugins)

" Keymap
let g:WhichKeyDesc_k_keymap = "<leader>k Keymap"
map <leader>k <Action>(ChangeKeymap)

" Toggle
let g:WhichKeyDesc_t_toggle = "<leader>t Toggle"
let g:WhichKeyDesc_ti_inlay_hints = "<leader>ti Inlay hints"
map <leader>ti <Action>(ToggleInlayHintsGloballyAction)

" Refactor
let g:WhichKeyDesc_r_refactor = "<leader>r Refactor"
let g:WhichKeyDesc_rr_refactor_this = "<leader>rr Refactor this"
map <leader>rr <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_rn_rename_element = "<leader>rn Rename element"
map <leader>rn <Action>(RenameElement)
let g:WhichKeyDesc_rm_extract_method = "<leader>rm Extract method"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_rv_introduce_variable = "<leader>rv Introduce variable"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_rf_introduce_field = "<leader>rf Introduce field"
map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_rs_change_signature = "<leader>rs Change signature"
map <leader>rs <Action>(ChangeSignature)

" Flash
map s <Action>(flash.search)
let g:WhichKeyDesc_s_flash_search = "s Flash search"

" Surround
let g:WhichKeyDesc_sw_surround_with = "<leader>sw Surround with"
map <leader>sw <Action>(SurroundWith)


" Jumping
let g:WhichKeyDesc_j_jump = "<leader>j Jump"
let g:WhichKeyDesc_jj_show_harpoon = "<leader>jj Show Harpoon"
map <leader>jj <Action>(ShowHarpoon)
let g:WhichKeyDesc_jH_harpoon = "<leader>jH Harpoon"
map <leader>jH <Action>(ca.alexgirard.harpoonIJ.mainGroup)
let g:WhichKeyDesc_ja_add_to_harpoon = "<leader>ja Add to Harpoon"
map <leader>ja <Action>(AddToHarpoon)
let g:WhichKeyDesc_jl_recent_locations = "<leader>jr Recent locations"
map <leader>jr <Action>(RecentLocations)
let g:WhichKeyDesc_jR_recent_files = "<leader>jR Recent files"
map <leader>jR <Action>(RecentFiles)
let g:WhichKeyDesc_jc_last_change = "<leader>jc Last change"
map <leader>jc <Action>(JumpToLastChange)
let g:WhichKeyDesc_je_goto_next_error = "<leader>je Goto next error"
map <leader>je <Action>(GotoNextError)
let g:WhichKeyDesc_jE_goto_previous_error = "<leader>jE Goto previous error"
map <leader>jE <Action>(GotoPreviousError)
let g:WhichKeyDesc_gL_goto_line = "<leader>jL Goto line"
nmap <leader>jL <Action>(GotoLine)

" Which-key show vim actions (g, z, etc)
let g:WhichKey_ShowVimActions = "true"

" Custom g commands

" Log
let g:WhichKeyDesc_gl_logit = "gl Log"
map gl <Action>(org.lso.logit.addLog)
let g:WhichKeyDesc_gc_comment_block = "gc Comment line"
map gc <Action>(CommentByLineComment)
let g:WhichKeyDesc_gC_comment_block = "gC Comment block"
map gC <Action>(CommentByBlockComment)

" Rename g commands
let g:WhichKeyDesc_goto_search_backward = "g# backward search word"
let g:WhichKeyDesc_goto_last_column = "g$ last screen column"
let g:WhichKeyDesc_goto_change_last_replace = "g& change last global search replace"
let g:WhichKeyDesc_goto_mark_line = "g' goto mark line"
let g:WhichKeyDesc_goto_search_forward = "g* forward search word"
let g:WhichKeyDesc_goto_first_screen_column = "g0 first screen column"
let g:WhichKeyDesc_goto_get_hex = "g8 get hex"
let g:WhichKeyDesc_goto_operator_action = "g@ operator action"
let g:WhichKeyDesc_goto_declaration = "gD goto declaration"
let g:WhichKeyDesc_goto_big_word_end_left = "gE big word end left"
let g:WhichKeyDesc_goto_enable_line_mode = "gH enable line mode"
let g:WhichKeyDesc_goto_insert_line_start = "gI insert at line start"
let g:WhichKeyDesc_goto_enable_character_mode = "gh enable character mode"
let g:WhichKeyDesc_goto_insert_previous_insert = "gi insert previous insert"
let g:WhichKeyDesc_goto_down_not_line = "gj down not line"
let g:WhichKeyDesc_goto_up_not_line = "gk up not line"
let g:WhichKeyDesc_goto_middle_column = "gm middle column"
let g:WhichKeyDesc_goto_select_next_search = "gn select next search"
let g:WhichKeyDesc_goto_nth_character = "go nth character"
let g:WhichKeyDesc_goto_paste_after = "gp paste after (leave cursor after)"
let g:WhichKeyDesc_goto_reformat_code = "gq reformat code"
let g:WhichKeyDesc_goto_next_tab = "gt next tab"
let g:WhichKeyDesc_goto_select_previous = "gv select previous"
let g:WhichKeyDesc_goto_change_case_toggle = "g~ change case toggle"
let g:WhichKeyDesc_goto_select_previous_search = "gN select previous search"
let g:WhichKeyDesc_paste_before = "gP paste before (leave cursor after)"
let g:WhichKeyDesc_previous_tab = "gT previous tab"
let g:WhichKeyDesc_make_text_lowercase = "gu Make text lowercase"
let g:WhichKeyDesc_make_text_uppercase = "gU Make text upper case"
let g:WhichKeyDesc_goto_first_non_space = "g^ first non space"
let g:WhichKeyDesc_goto_last_non_space = "g_ last non space"
let g:WhichKeyDesc_goto_mark = "g` goto mark"
let g:WhichKeyDesc_goto_get_ascii = "ga get ascii"
let g:WhichKeyDesc_goto_declaration_d = "gd goto declaration"
let g:WhichKeyDesc_goto_word_end_left = "ge word end left"

" Remove from which-key
let g:WhichKeyDesc_g_ctrlg = "g<^-g> asdf"
let g:WhichKeyDesc_goto_up_not_line_arrow = "gâ"
let g:WhichKeyDesc_goto_down_not_line_arrow = "gâ"
let g:WhichKeyDesc_goto_first_screen_column_arrow = "gâ"
let g:WhichKeyDesc_goto_last_screen_column_arrow = "gâ"

" Rename z commands
let g:WhichKeyDesc_z_scroll_first_screen_line_page_start = "z+ scroll first screen line page start"
let g:WhichKeyDesc_z_scroll_last_screen_line_start = "z- scroll last screen line start"
let g:WhichKeyDesc_z_scroll_middle_screen_line_start = "z. scroll middle screen line start"
let g:WhichKeyDesc_z_collapse_region_recursively = "zC collapse region recursively"
let g:WhichKeyDesc_z_scroll_half_width_right = "zH scroll half width right"
let g:WhichKeyDesc_z_scroll_half_width_left = "zL scroll half width left"
let g:WhichKeyDesc_z_collapse_all_regions = "zM collapse all regions"
let g:WhichKeyDesc_z_expand_region_recursively = "zO expand region recursively"
let g:WhichKeyDesc_z_expand_all_regions = "zR expand all regions"
let g:WhichKeyDesc_z_scroll_last_screen_line_page_start = "z^ scroll last screen line page start"
let g:WhichKeyDesc_z_expand_collapse_toggle_region = "za toggle region"
let g:WhichKeyDesc_z_scroll_last_screen_line = "zb scroll last screen line"
let g:WhichKeyDesc_z_collapse_region = "zc collapse region"
let g:WhichKeyDesc_z_scroll_last_screen_column = "ze scroll last screen column"
let g:WhichKeyDesc_z_scroll_column_right = "zh scroll column right"
let g:WhichKeyDesc_z_scroll_column_left = "zl scroll column left"
let g:WhichKeyDesc_z_expand_region = "zo expand region"
let g:WhichKeyDesc_z_scroll_first_screen_column = "zs scroll first screen column"
let g:WhichKeyDesc_z_scroll_first_screen_line = "zt scroll first screen line"
let g:WhichKeyDesc_z_scroll_middle_screen_line = "zz scroll middle screen line"
let g:WhichKeyDesc_z_scroll_column_right_arrow = "zâ scroll column right"
let g:whichkeydesc_z_scroll_column_left_arrow = "zâ scroll column left"
let g:WhichKeyDesc_z_scroll_first_screen_line_start_enter = "z<CR> scroll first screen line start"

Plug 'machakann/vim-highlightedyank'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'vim-matchit'
Plug 'vim-multiple-cursors'

"
"
"
" :actionlist <some word> to see available actions
